import React, { useEffect, useState } from "react";
const COLORS = {
  CLEAR: "#000000",
  RED: "#FF0000",
  GREEN: "#00FF00",
  YELLOW: "#FFFF00",
  YELLOW_FLASH: "#FFFF00",
  WHITE: "#FFFFFF",
  CHEQUERED: null, // special case for gif  FORM_UP: "#00BFFF",};function hexToRgb(hex) {  hex = hex.replace(/^#/, "");  if (hex.length === 3) {    hex = hex      .split("")      .map((x) => x + x)      .join("");  }  const num = parseInt(hex, 16);  return [(num >> 16) & 255, (num >> 8) & 255, num & 255];}function rgbToHex([r, g, b]) {  return (    "#" +    [r, g, b]      .map((x) => {        const hex = x.toString(16);        return hex.length === 1 ? "0" + hex : hex;      })      .join("")  );}function adjustBrightness(hex, brightness) {  if (hex === "#000000") return hex;  const rgb = hexToRgb(hex);  const adjusted = rgb.map((c) => Math.round((c * brightness) / 100));  return rgbToHex(adjusted);}function Slave() {  const [state, setState] = useState({    action: "CLEAR",    brightness: 80,    boxWidth: 40,    boxHeight: 80,  });  const [displayColor, setDisplayColor] = useState(COLORS.CLEAR);  const [isFlashing, setIsFlashing] = useState(false);  const [showChequered, setShowChequered] = useState(false);  // Connect to WebSocket server and listen for updates  useEffect(() => {    const ws = new window.WebSocket("ws://localhost:8080");    ws.onmessage = (msg) => {      try {        const data = JSON.parse(msg.data);        setState((prev) => ({          ...prev,          ...data,        }));      } catch {}    };    return () => ws.close();  }, []);  // Handle flashing and chequered logic  useEffect(() => {    setShowChequered(state.action === "CHEQUERED");    setIsFlashing(state.action === "YELLOW_FLASH");    if (state.action === "WHITE") {      setDisplayColor(COLORS.WHITE);    } else if (state.action === "CHEQUERED") {      setDisplayColor("#222");    } else if (state.action !== "YELLOW_FLASH") {      setDisplayColor(COLORS[state.action] || COLORS.CLEAR);    }  }, [state]);  // Flashing effect for yellow  useEffect(() => {    let interval;    if (isFlashing) {      interval = setInterval(() => {        setDisplayColor((prev) =>          prev === COLORS.YELLOW ? COLORS.CLEAR : COLORS.YELLOW        );      }, 500);    } else if (state.action === "YELLOW_FLASH") {      setDisplayColor(COLORS.YELLOW);    }    return () => clearInterval(interval);  }, [isFlashing, state.action]);  return (    <div className="flex min-h-screen max-h-screen bg-gray-900 text-white items-center justify-center relative">      {/* Top right "SLAVE" label */}      <div className="absolute top-4 right-8 text-3xl font-extrabold text-blue-400 select-none z-10">        SLAVE      </div>      <div        className="relative flex items-center justify-center overflow-hidden"        style={{          width: state.boxWidth,          height: state.boxHeight,          background:            state.action === "FORM_UP"              ? "#000"              : showChequered              ? "#222"              : isFlashing              ? displayColor              : adjustBrightness(displayColor, state.brightness),          transition: "background 0.2s",          imageRendering: "pixelated",        }}      >        {showChequered && (          <img            src="/chequered.gif"            alt="Chequered"            style={{              width: "100%",              height: "100%",              objectFit: "cover",              imageRendering: "pixelated",            }}          />        )}        {state.action === "FORM_UP" && (          <span            style={{              color: "#fff",              fontWeight: "bold",              fontSize: `min(${Math.round(                state.boxHeight * 0.6              )}px, ${Math.round((state.boxWidth * 0.9) / 8)}px)`,              textShadow: "2px 2px 8px #000",              letterSpacing: "0.1em",              whiteSpace: "nowrap",              textAlign: "center",              width: "100%",              lineHeight: 1,            }}          >            FORM UP          </span>        )}      </div>    </div>  );
};

export default Slave;
